{
    // Name and the location of the parser which will be generated.
    parserClass="vts.parser.Parser"

    // All nodes will extend this class. This wraps AST node to a PSI node.
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    // Prefix for all generated classes.
    psiClassPrefix="VDL"
    // Suffix for implementation classes.
    psiImplClassSuffix="Impl"

    // Location to be used when generating PSI classes.
    psiPackage="vts.psi"
    // Location to be used when generating PSI implementation classes.
    psiImplPackage="vts.psi.impl"

    // Element type holder class name. This class will be used extensively throughout the tutorial.
    elementTypeHolderClass="vts.psi.Types"

    // Class which will be used to create internal nodes.
    elementTypeClass="com.example.intelijplugin.psi.ElementType"
    // Class which will be used to create leaf nodes.
    tokenTypeClass="com.example.intelijplugin.psi.TokenType"

    tokens = [
        IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
        WHITE_SPACE = 'regexp:\s+'
        LB= '('
        RB= ')'
        LP= '{'
        RP= '}'
        SEMI= ';'
        LSB='['
        RSB=']'
        COMMA=','
        COMMENT ='regexp: /* .*? */'
    ]
}


program ::= (entity_declaration|relationship_declaration |dto_declaration)*

// api_declaration: API
entity_declaration ::= ENTITY IDENTIFIER table_name? entity_body?
table_name ::= LSB IDENTIFIER RSB
entity_body::= LP entity_field* RP
entity_field::= IDENTIFIER type entity_validate* SEMI
relation_type::= ONETOMANY | ONETOONE | MANYTOMANY |MANYTOONE
entity_validate::= REQUIRE | UNIQUE
type::= INTERGER | DOUBLE | LONG
relationship_declaration::= API
dto_declaration::= DTO








